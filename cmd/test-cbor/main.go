package main

import (
  "fmt"
  "os"

  "github.com/christianschmitz/cardano-suite/network"
)

// test the autogenerated serializer and deserializer for the Handshake messages
func main() {
  testMessage("HandshakeProposeVersions", network.NewHandshakeProposeVersions(network.TESTNET_MAGIC))

  testMessage("HandshakeAcceptVersion", &network.HandshakeAcceptVersion{
    0,
    0,
  })

  testMessage("HandshakeVersionMismatch", &network.HandshakeVersionMismatch{
    []int{3},
  })

  testMessage("HandshakeDecodeError", &network.HandshakeDecodeError{
    0,
    "decode error",
  })

  testMessage("HandshakeDecodeError", &network.HandshakeDecodeError{
    0,
    "decode error",
  })

  testMessage("HandshakeRefused", &network.HandshakeRefused{
    1,
    "handshake refused",
  })
}

func testMessage(type_ string, msg network.HandshakeMessage) {
  fmt.Fprintf(os.Stdout, "\nTesting %s", type_)

  b := network.HandshakeMessageToCBOR(msg) // it is very important to use this function, and not the struct specific ToCBOR

  fmt.Fprintf(os.Stdout, "CBOR: [")
  for i, x := range b {
    if i == len(b) - 1 {
      fmt.Fprintf(os.Stdout, "%02x", x)
    } else {
      fmt.Fprintf(os.Stdout, "%02x, ", x)
    }
  }
  fmt.Println("]")

  msg_, err := network.HandshakeMessageFromCBOR(b)
  if err != nil {
    panic(err)
  }

  fmt.Println("ORIG: ", msg_)
}

