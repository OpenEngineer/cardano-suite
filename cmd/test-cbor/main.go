package main

import (
	"fmt"
	"os"

	"github.com/christianschmitz/cardano-suite/codec"
	"github.com/christianschmitz/cardano-suite/network"
)

// test the autogenerated serializer and deserializer for the Handshake messages
func main() {
	testMessage("HandshakeProposeVersions", network.NewHandshakeProposeVersions(network.TESTNET_MAGIC))

	testMessage("HandshakeAcceptVersion", &network.HandshakeAcceptVersion{
		0,
		0,
	})

	testMessage("HandshakeVersionMismatch", &network.HandshakeVersionMismatch{
		[]int{3},
	})

	testMessage("HandshakeDecodeError", &network.HandshakeDecodeError{
		0,
		"decode error",
	})

	testMessage("HandshakeDecodeError", &network.HandshakeDecodeError{
		0,
		"decode error",
	})

	testMessage("HandshakeRefused", &network.HandshakeRefused{
		1,
		"handshake refused",
	})
}

func testMessage(type_ string, msg network.HandshakeMessage) {
	fmt.Fprintf(os.Stdout, "\nTesting %s", type_)

	b := codec.ToCBOR(msg)

	fmt.Fprintf(os.Stdout, "CBOR: [")
	for i, x := range b {
		if i == len(b)-1 {
			fmt.Fprintf(os.Stdout, "%02x", x)
		} else {
			fmt.Fprintf(os.Stdout, "%02x, ", x)
		}
	}
	fmt.Println("]")

	var msg_ network.HandshakeMessage
	if err := codec.FromCBOR(b, &msg_); err != nil {
		panic(err)
	}

	fmt.Println("ORIG: ", msg_)
}
